{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","task","handleChange","bind","handleSubmit","event","this","setState","target","name","value","preventDefault","isEditing","editTodo","id","toggleForm","addNewTodo","uuid","completed","className","onSubmit","htmlFor","type","onChange","Component","Todo","handleRemove","handleToggle","removeTodo","toggleTodo","key","onClick","TodoList","todos","create","remove","edit","toggleCompletion","newTodo","filter","td","updatedTodo","map","todo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0217756b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport uuid from 'uuid/v4';\nimport './NewTodoForm.css';\n\nclass NewTodoForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            task: ''\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(event){\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n    handleSubmit(event){\n        event.preventDefault();\n        if(this.props.isEditing){\n            this.props.editTodo(this.props.id, this.state.task);\n            this.props.toggleForm();\n        } else {\n            this.props.addNewTodo({...this.state, id: uuid(), completed: false});\n            this.setState({\n                task: ''\n            })\n        } \n    }\n\n    render(){\n        return(\n            <form className='NewTodoForm' onSubmit={this.handleSubmit}>\n                <label htmlFor='task'>{this.props.isEditing? '': 'Add New Todo: '}</label>\n                <input \n                    id='task'\n                    type='text'\n                    name='task'\n                    value={this.state.task}\n                    onChange={this.handleChange}\n                >\n                </input>\n                <button>{this.props.isEditing? 'Update' : 'Add'}</button>\n            </form>\n        )\n    }\n}\n\nexport default NewTodoForm;","import React, { Component } from 'react';\nimport NewTodoForm from './NewTodoForm';\nimport './Todo.css';\n\nclass Todo extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            isEditing: false\n        }\n        this.handleRemove = this.handleRemove.bind(this);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n    handleRemove(event){\n        this.props.removeTodo(this.props.id);\n    }\n    \n    toggleForm(){\n        this.setState({\n            isEditing: !this.state.isEditing\n        })\n    }\n    handleToggle(){\n        this.props.toggleTodo(this.props.id);\n    }\n    render(){\n        if(this.state.isEditing){\n            return (\n                <div>\n                    <NewTodoForm \n                        isEditing \n                        editTodo={this.props.editTodo}\n                        id={this.props.id}\n                        key={this.props.id}\n                        toggleForm={this.toggleForm}\n                    />\n                </div>\n            )\n        } else {\n            return(\n                <div className='todo'>\n                    <li \n                        className={this.props.completed? 'todo-task completed' : 'todo-task'} \n                        onClick={this.handleToggle}\n                    >\n                        {this.props.task}\n                         \n                    </li>\n                    <div className='todo-buttons'>\n                        <span onClick={this.toggleForm} className='fa fa-pen'></span>\n                        <span onClick={this.handleRemove} className='fa fa-trash-alt' ></span>\n                    </div>\n                </div>\n            )\n        }\n        \n    }\n}\n\nexport default Todo;","import React, { Component } from 'react';\nimport Todo from './Todo';\nimport NewTodoForm from './NewTodoForm';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            todos: []\n        }\n        this.create = this.create.bind(this);\n        this.remove = this.remove.bind(this);\n        this.edit = this.edit.bind(this);\n        this.toggleCompletion = this.toggleCompletion.bind(this);\n    }\n    create(newTodo){\n        this.setState({\n            todos: [...this.state.todos, newTodo]\n        })\n    }\n    remove(id){\n        this.setState({\n            todos: this.state.todos.filter(td => td.id !== id)\n        })\n    }\n    edit(id, updatedTodo){\n        this.setState({\n            todos: this.state.todos.map(td => {\n                if(td.id === id){\n                    return {task: updatedTodo, id: td.id, completed: false}\n                } else {\n                    return td\n                }\n        })\n    })}\n    toggleCompletion(id){\n        this.setState({\n            todos: this.state.todos.map(td => {\n                if(td.id === id){\n                    return {task: td.task, id: td.id, completed: !td.completed}\n                } else {\n                    return td\n                }\n            })\n        })\n    }\n\n    render(){\n        const todos = this.state.todos.map(todo => {\n            return <Todo key={todo.id} id={todo.id} task={todo.task} removeTodo={this.remove} editTodo={this.edit} completed={todo.completed} toggleTodo={this.toggleCompletion} />\n        })\n        return(\n            <div className=\"TodoList\">\n                <h1>Todo List</h1>\n                <ul>\n                    {todos}\n                </ul>\n                <NewTodoForm addNewTodo={this.create} />\n            </div>\n        )\n    }\n}\n\nexport default TodoList;","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}